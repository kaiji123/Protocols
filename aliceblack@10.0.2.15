//This is a simple client that connects to on ip "ipAddy" on  port "portNo" 
// and sends two strings.

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.Security;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;
import java.io.FileOutputStream;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;
import java.io.DataInputStream;
import java.io.DataOutputStream;
public class client2 {

    // ipAddy must be changed to the ip address of the server
    static String ipAddy = "127.0.0.1";
    static int portNo = 11338;
	
    static BigInteger g = new BigInteger("129115595377796797872260754286990587373919932143310995152019820961988539107450691898237693336192317366206087177510922095217647062219921553183876476232430921888985287191036474977937325461650715797148343570627272553218190796724095304058885497484176448065844273193302032730583977829212948191249234100369155852168");
	static BigInteger p = new BigInteger("165599299559711461271372014575825561168377583182463070194199862059444967049140626852928438236366187571526887969259319366449971919367665844413099962594758448603310339244779450534926105586093307455534702963575018551055314397497631095446414992955062052587163874172731570053362641344616087601787442281135614434639");


    public static void main(String[] args) throws Exception {
	
	System.out.println("opening socket");
	Socket socket = new Socket(ipAddy,portNo);
	
	//Wrapping a PrintWriter around the output streams lets us to write strings
	OutputStream in = socket.getOutputStream();
    InputStream out = socket.getInputStream();
    DataOutputStream outStraem = DataOutputStream(out);
    DataInputStream inStream= DataInputStream(in);


    DHParameterSpec dhSpec = new DHParameterSpec(p,g);
    KeyPairGenerator diffieHellmanGen = KeyPairGenerator.getInstance("DiffieHellman");
    diffieHellmanGen.initialize(dhSpec);
    KeyPair serverPair = diffieHellmanGen.generateKeyPair();
    PrivateKey x = serverPair.getPrivate();
    PublicKey gToTheX = serverPair.getPublic();
    
    outStream.writeInt(gToTheX.getEncoded().length);
    outStream.write(gToTheX.getEncoded());


    int publicKeyLen = inStream.readInt();
	byte[] message1 = new byte[publicKeyLen];

    inStream.read(message1);
    KeyFactory keyfactoryDH = KeyFactory.getInstance("DH");
    X509EncodedKeySpec x509Spec = new X509EncodedKeySpec(message1);
    PublicKey gToTheY = keyfactoryDH.generatePublic(x509Spec);
	System.out.println(byteArrayToHexString(message1));
	System.out.println(new String(message1, StandardCharsets.US_ASCII));

    calculateSessionKey(x, gToTheY);

	SecureRandom gen = new SecureRandom();
	int cNonce = gen.nextInt();
	
	
	
	//write back again (Ns,Ns)
	outStream.write(message2);

	byte[] message3 = new byte[208];
	byte [] message4 = new byte[208];
	


	
	
	System.out.println(inStream.read(message3) + "read ");
	
	
	System.out.println(byteArrayToHexString(message3));
	Integer s = new Integer(0);
	byte [] zerobyte = new byte[16];
	 Key secretKeySpec = new SecretKeySpec(zerobyte, "AES");
	Cipher decAEScipher;
	 
	 
	decAEScipher = Cipher.getInstance("AES/ECB/NoPadding");
	decAEScipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
	
	byte[] secret = decAEScipher.update(message3);
	System.out.println();
	String tok = new String(secret);
	System.out.println(tok);
	

	
 	
	
	System.out.println("done");
        socket.close();
    }
    	// This method sets decAESsessioncipher & encAESsessioncipher 
	private void calculateSessionKey(PrivateKey y, PublicKey gToTheX)  {
	    try {
		// Find g^xy
		KeyAgreement serverKeyAgree = KeyAgreement.getInstance("DiffieHellman");
		serverKeyAgree.init(y);
		serverKeyAgree.doPhase(gToTheX, true);
		byte[] secretDH = serverKeyAgree.generateSecret();
		if (debug) System.out.println("g^xy: "+byteArrayToHexString(secretDH));
		//Use first 16 bytes of g^xy to make an AES key
		byte[] aesSecret = new byte[16];
		System.arraycopy(secretDH,0,aesSecret,0,16);
		Key aesSessionKey = new SecretKeySpec(aesSecret, "AES");
		if (debug) System.out.println("Session key: "+byteArrayToHexString(aesSessionKey.getEncoded()));
		// Set up Cipher Objects
		decAESsessionCipher = Cipher.getInstance("AES");
		decAESsessionCipher.init(Cipher.DECRYPT_MODE, aesSessionKey);
		encAESsessionCipher = Cipher.getInstance("AES");
		encAESsessionCipher.init(Cipher.ENCRYPT_MODE, aesSessionKey);
	    } catch (NoSuchAlgorithmException e ) {
		System.out.println(e);
	    } catch (InvalidKeyException e) {
		System.out.println(e);
	    } catch (NoSuchPaddingException e) {
		e.printStackTrace();
	    }
	}

    private static byte[] hexStringToByteArray(String s) {
	int len = s.length();
	byte[] data = new byte[len / 2];
	for (int i = 0; i < len; i += 2) {
	    data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
				  + Character.digit(s.charAt(i+1), 16));
	}
	return data;
    }   
	 private static String byteArrayToHexString(byte[] data) { 
		StringBuffer buf = new StringBuffer();
		for (int i = 0; i < data.length; i++) { 
		    int halfbyte = (data[i] >>> 4) & 0x0F;
		    int two_halfs = 0;
		    do { 
			if ((0 <= halfbyte) && (halfbyte <= 9)) 
			    buf.append((char) ('0' + halfbyte));
			else 
			    buf.append((char) ('a' + (halfbyte - 10)));
			halfbyte = data[i] & 0x0F;
		    } while(two_halfs++ < 1);
		} 
		return buf.toString();
	    } 
}












